// Ignore Spelling: Sha

using System.IO;
using System.Security.Cryptography;
using System.Text;
using VisJsNetworkLibrary.Interfaces;
using VisJsNetworkLibrary.NetworkProperty;

namespace VisJsNetworkLibrary
{
    public class NetworkIntegrityLog : IFileContent
    {
        private readonly NetworkProperties _networkProperties;
        private readonly string _iExcelNetworkVersion;

        public NetworkIntegrityLog(NetworkProperties networkProperties, string iExcelNetworkVersion)
        {
            _networkProperties = networkProperties;
            _iExcelNetworkVersion = iExcelNetworkVersion;
        }

        public string GenerateFileContent()
        {
            string content = 
                $"Network was generated by Excel Add-in iExcelNetwork ver: {_iExcelNetworkVersion}.\n" +
                "\n" +
                $"Generated file's name: {_networkProperties.OutputFileName}.html\n"+
                $"SHA256: {ComputeSha256HashFromFile(_networkProperties.OutputFolder, _networkProperties.OutputFileName)}\n" +
                "\n" +
                "iExcelNetwork is open source project under MIT license.\n" +
                "Project source code is available: https://github.com/Alek010/iExcelNetwork";

            return content;
        }

        public string GetFilePath()
        {
            string networkHtmlFilePath = BuildFullFilePath(_networkProperties.OutputFolder, _networkProperties.OutputFileName);

            return SubstituteFileExtention(networkHtmlFilePath, ".txt");
        }

        private string ComputeSha256HashFromFile(string pathToFolder, string fileName)
        {
            byte[] fileBytes = File.ReadAllBytes(BuildFullFilePath(pathToFolder, fileName));

            using (SHA256 sha256Hash = SHA256.Create())
            {
                byte[] bytes = sha256Hash.ComputeHash(fileBytes);

                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < bytes.Length; i++)
                {
                    builder.Append(bytes[i].ToString("x2"));
                }
                return builder.ToString();
            }
        }

        private string SubstituteFileExtention(string filePath, string fileExtention)
        {
            return Path.ChangeExtension(filePath, fileExtention);
        }

        private string BuildFullFilePath(string folderPath, string fileName)
        {
            return Path.Combine(folderPath, fileName) + ".html";
        }


    }
}
