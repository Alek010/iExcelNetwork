// Ignore Spelling: Visjs

using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using VisjsNetworkLibrary.Interfaces;

namespace VisjsNetworkLibrary
{
    public class IntegrityLogContent : IFileContent
    {
        private readonly string _filePath;
        private readonly string _iExcelnetworkVersion;

        public IntegrityLogContent(string filePath, string iExcelNetworkVersion)
        {
            _filePath = filePath;
            _iExcelnetworkVersion = iExcelNetworkVersion;
        }

        public string GenerateFileContent()
        {
            string content =
            $"Network was generated by Excel Add-in iExcelNetwork ver: {_iExcelnetworkVersion}.\n" +
            "\n" +
            $"Generated file's name: {GetFileNameFromPath()}\n" +
            $"SHA256: {ComputeSha256HashFromFile()}\n" +
            "\n" +
            "iExcelNetwork is open source project under MIT license.\n" +
            "Project source code is available: https://github.com/Alek010/iExcelNetwork\n" +
            "\n" +
            "Project wiki is available: https://github.com/Alek010/iExcelNetwork/wiki";

            return content;
        }

        private string ComputeSha256HashFromFile()
        {
            byte[] fileBytes = File.ReadAllBytes(_filePath);

            using (SHA256 sha256Hash = SHA256.Create())
            {
                byte[] bytes = sha256Hash.ComputeHash(fileBytes);

                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < bytes.Length; i++)
                {
                    builder.Append(bytes[i].ToString("x2"));
                }
                return builder.ToString();
            }
        }

        private string GetFileNameFromPath()
        {
            if (string.IsNullOrWhiteSpace(_filePath))
            {
                throw new ArgumentNullException(nameof(_filePath), "File path cannot be null or empty.");
            }

            return Path.GetFileName(_filePath);
        }
    }
}
